from _root_path import add_root
add_root()

import numpy as np
import matplotlib.pyplot as plt

from skspatial.objects import Point, Points, Plane, LineSegment
from skspatial.transformation import transform_coordinates
from skspatial.plotting import plot_3d

from dataclasses import dataclass

import map_muscles.muscle_template.projection_on_plane as pp

class Segment():
    def __init__(self, two_points):
        self.A = Point(two_points[0])
        self.B = Point(two_points[1])

    def plotter(self, **kwargs):
        """
        Plotter method for the muscle template.
        It has to be unpacked in plot_3d() to be used: 
        
        e.g.:
        plot_3d(*Segment.plane_projection())

        Args:
            **kwargs: Additional keyword arguments to be passed to the underlying plotter methods.

        Returns:
            tuple: A tuple containing the plots generated by the underlying plotter methods for muscle A and muscle B.
        """
        plotter_A = self.A.plotter(**kwargs)
        plotter_B = self.B.plotter(**kwargs)

        return plotter_A, plotter_B
    
    def project_on_plane(self, plane: Plane):
        projected_A = plane.project_point(self.A)
        projected_B = plane.project_point(self.B)
        return Segment([projected_A, projected_B])
    
    def plot_segment(self, ax, **kwargs):
        ax.plot([self.A[0], self.B[0]], [self.A[1], self.B[1]], [self.A[2], self.B[2]], **kwargs)

# class Fiber = Segment
class Fiber(Segment):
    pass

class Fibers():
    fibers: list # of Fiber

    def __init__(self, fibers):
        """
        Args:
            fibers (list): A list of Fiber (Segment).
        """
        self.fibers = fibers

    @classmethod
    def fibers_from_points(cls, segments):
        """_summary_

        Args:
            segments (list): A list of two points tuple
        """
        return cls([Fiber(segment) for segment in segments])

    def get_plotters(self, **kwargs):
        """
        Returns a list of plotters for each fiber.

        Args:
            **kwargs: Additional keyword arguments to be passed to the fiber plotter.

        Returns:
            list: A list of plotters for each fiber.
        """

        plotters = [fiber.plotter(**kwargs) for fiber in self.fibers]

        # as it is a list of tuples, we need to unpack it
        return [point_plotter for fiber_plotter in plotters for point_plotter in fiber_plotter]

    def plot_fibers(self, ax, **kwargs):
        for fiber in self.fibers:
            fiber.plot_segment(ax, **kwargs)

    def project_on_plane(self, plane: Plane):

        fibers = [fiber.project_on_plane(plane) for fiber in self.fibers]
        
        return Fibers(fibers)

    def get_min_x(self):
        return min([min(fiber.A[0], fiber.B[0]) for fiber in self.fibers])
    
    def get_max_x(self):
        return max([max(fiber.A[0], fiber.B[0]) for fiber in self.fibers])
    
    def get_min_y(self):
        return min([min(fiber.A[1], fiber.B[1]) for fiber in self.fibers])
    
    def get_max_y(self):
        return max([max(fiber.A[1], fiber.B[1]) for fiber in self.fibers])
    
    def get_min_z(self):
        return min([min(fiber.A[2], fiber.B[2]) for fiber in self.fibers])
    
    def get_max_z(self):
        return max([max(fiber.A[2], fiber.B[2]) for fiber in self.fibers])
    
    def get_lims_x(self):
        return [self.get_min_x(), self.get_max_x()]
    
    def get_lims_y(self):
        return [self.get_min_y(), self.get_max_y()]
    
    def get_lims_z(self):
        return [self.get_min_z(), self.get_max_z()]
        
    def get_lims(self):
        return self.get_lims_x(), self.get_lims_y(), self.get_lims_z()
    
class Muscles():
    muscles: list # of Fibers

    def __init__(self, muscles):
        """
        Args:
            muscles (list): A list of Fibers
        """
        self.muscles = muscles

    @classmethod
    def muscles_from_df(cls, muscles_df, line_key='line'):
        return cls([Fibers.fibers_from_points(muscle['line'].to_numpy()) for muscle in muscles_df])

#TODO



@dataclass
class SegmentedFiber():
    segments: list # of Segments

def one_muscle_to_fibers(muscle, line_key='line'):
    """
    Convert a muscle df to a Fibers object.

    Parameters:
    muscle (dict): A dictionary representing a muscle.
    line_key (str, optional): The key in the muscle dictionary that contains the fiber data. Defaults to 'line'.

    Returns:
    Fibers: A Fibers object representing the muscle's fibers.
    """
    return Fibers.fibers_from_points(muscle[line_key].to_numpy())

def muscles_to_fibers(muscles, line_key='line'):
    """
    Convert a list of muscles dfs to a list of Fibers.

    Parameters:
    muscles (list): A list of dictionaries representing muscles.
    line_key (str, optional): The key in each muscle dictionary that contains the fiber data. Defaults to 'line'.

    Returns:
    list: A list of Fibers objects, each representing a muscle's fibers.
    """
    return [Fibers.fibers_from_points(muscle[line_key].to_numpy()) for muscle in muscles]


if __name__ == "__main__":

    v1 = np.array([1.0,.0,.0])
    v2 = np.array([.0,1.0,.0])

    u1,u2 = pp.orthonormal_vectors(v1, v2)

    points = Points([[0, 0, 0], v1, v2])

    plane = Plane.from_points(points[0], points[1], points[2])
    segment = Segment([[0, 0, 1], [1, 1, 3]])

    projected_segment = segment.project_on_plane(plane)

    fig, ax = plot_3d(
        plane.plotter(alpha=0.2),
        *segment.plotter(c='k'),
        *projected_segment.plotter(c='r'),
    )

    segment.plot_segment(ax, c='k')
    projected_segment.plot_segment(ax, c='r')

    plt.show()